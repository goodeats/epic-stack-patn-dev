---
description:
globs:
alwaysApply: false
---
# Playwright Test Suite Architecture

This document outlines the architecture and conventions for our Playwright End-to-End (E2E) test suite. It serves as a guide for both human developers and as a **cursor rule for LLM assistants** to ensure that new tests and Page Object Models (POMs) adhere to our established patterns.

## Guiding Principles

1. **Separation of Concerns**: Test files (`*.test.ts`) should describe *user stories* and *workflows*, not implementation details. The "how" of an interaction belongs in a Page Object Model.
2. **Composition over Inheritance (for Pages & Tables)**: Main page POMs (like `DashboardAboutPage`) *compose* smaller component POMs (like `AboutMeSectionsTable`). For data tables, we use **mixins** to compose features (see below).
3. **Inheritance for Patterns**: Abstract base classes define and reuse common *interaction patterns* (e.g., how to interact with a menu-driven table vs. a dialog-driven table).
4. **Fluent API**: Methods that transition the user to a new state (like clicking "Edit") should return an instance of the POM for that new state. This creates a highly readable, chainable API in our tests (e.g., `const editor = await table.edit('Item');`).
5. **Single Responsibility**: Each class should have one primary reason to change. A table POM handles table interactions. An editor POM handles form interactions. A page POM handles page-level navigation and component composition.

---

## Directory Structure

All Page Object Models are located in `tests/e2e/poms/`.

```bash
# Example structure
poms/
├── base/                  # Abstract base classes and mixins (CRITICAL FOR REUSE)
│   ├── base-data-table.pom.ts
│   ├── base-details-page.pom.ts
│   ├── base-editor.pom.ts
│   ├── base-list-page.pom.ts
│   ├── base-route.pom.ts
│   ├── dialog-driven-data-table.pom.ts
│   └── menu-driven-data-table.pom.ts
│
└── dashboard/             # Concrete POMs for specific features
    └── about/
        ├── dashboard-about-category-editor-dialog.pom.ts
        ├── dashboard-about-data-tables.pom.ts
        ├── dashboard-about-details-page.pom.ts
        ├── dashboard-about-me-editor-page.pom.ts
        └── dashboard-about-page.pom.ts
```

---

## Composable Data Table POMs (NEW)

**LLM ASSISTANT RULE:**
When creating a new POM for a data table, you **MUST** use the mixin-based approach from `base/data-table.pom.ts`. Do not create flat, monolithic POMs. Compose your table POM from the following mixins as needed:

### Data Table Mixins

- **MenuDriven**: Adds row menu actions (edit/delete via dropdown menu).
- **DialogDriven**: Adds dialog-opening behavior (e.g., clicking a row name opens an editor dialog).
- **Switchable**: Adds support for row-level toggle switches (e.g., publish/unpublish).
- **Filterable**: Adds support for column filters (e.g., filter by name, category).

Mixins are composed using TypeScript's functional mixin pattern. This allows you to build highly flexible, DRY, and readable table POMs.

#### Example: Composing a Table POM

```ts
import { MenuDriven, Switchable, Filterable, DialogDriven, MixinBase } from '../base/data-table.pom'
import { MyEditorDialogPOM } from './my-editors.pom'

const MyComposableTable = Filterable(
  Switchable(
    MenuDriven<MyEditorDialogPOM>()(MixinBase)
  )
)

export class MyTablePOM extends MyComposableTable {
  readonly menuName = 'Open my item menu'
  readonly expectedHeaders = ['Name', 'Description', 'Status']

  constructor(page, container) {
    super(page, container)
    this.switchName = /toggle publish/i
    this.addFilters([
      { name: 'name', placeholder: 'Filter name...' },
      { name: 'description', placeholder: 'Filter description...' },
    ])
  }

  // Implement required abstract methods (e.g., edit)
  async edit(name: string): Promise<MyEditorDialogPOM> {
    await this.clickEditButton(name)
    return new MyEditorDialogPOM(this.page)
  }
}
```

#### Flexibility

- Mixins can be combined in any order, depending on the table's features.
- You can extend and override methods as needed for custom behavior.
- This approach enables rapid creation of new CRUD table POMs with minimal boilerplate.

---

## Base Classes vs. Mixins

- **Base Classes** (e.g., `BaseRoutePOM`, `BaseEditorPOM`) provide core structure for pages and editors.
- **Mixins** (from `base/data-table.pom.ts`) are for composing data table features. Always use mixins for tables.
- **Rule:** For a new CRUD feature, always start with the base class for the page/editor, and compose your table POM from mixins.

---

## Checklist for New CRUD Features

1. **Create the List Page POM:**
    - Create e.g. `dashboard/project/dashboard-project-page.pom.ts`.
    - **MUST** extend `BaseListPagePOM`.
    - Compose instances of your table POMs (see above for mixin usage).

2. **Create the Data Table POMs:**
    - Create e.g. `dashboard/project/dashboard-project-data-tables.pom.ts`.
    - Compose each table POM from the required mixins.
    - Implement required methods (e.g., `edit`, `delete`, `filterByX`).

3. **Create the Editor POMs:**
    - Create e.g. `dashboard/project/dashboard-project-editor-page.pom.ts` (extends `BasePageEditorPOM`).
    - Create e.g. `dashboard/project/dashboard-project-category-editor-dialog.pom.ts` (extends `BaseDialogEditorPOM`).

4. **Create the Details Page POM:**
    - Create e.g. `dashboard/project/dashboard-project-details-page.pom.ts` (extends `BaseDetailsPagePOM`).
    - Implement the `goto(itemId)` method and provide a typed `edit()` method.

5. **Write the Test File:**
    - Create e.g. `tests/e2e/project-crud.test.ts`.
    - Instantiate your page and table POMs.
    - All interactions must flow through the POMs. Use the fluent API.
    - Focus the test on asserting user-facing outcomes, not on how locators are found.

---

## Test Utility Patterns

### Select Field Validation

Use this pattern for selecting and validating the current value of a select field:

```ts
// select
await page.getByRole('combobox', { name: 'Category' }).click()
await page.getByRole('option', { name: categoryToSelect }).click()

// validate
const categoryValue = await page
  .getByRole('combobox', { name: 'Category' })
  .textContent()
await expect(categoryValue).toBe(category.name)

// for validating errors
const categoryError = page
  .getByRole('combobox', { name: 'Category' })
  .locator('xpath=./following-sibling::div')
await expect(categoryError).toHaveText('Category is required')
```

### Error Validation

- Use `.getByRole('alert')` or specific error locators to assert error messages.
- Always check that errors are visible and have the correct text.

### Dialog Handling

- When opening dialogs, always `await dialog.waitUntilVisible()` before interacting.
- To close dialogs, prefer clicking outside or using the dialog's close button.

---

## LLM Assistant Rules (for Cursor)

- **Always** use the mixin-based approach for new data table POMs.
- **Never** create flat, monolithic POMs for tables.
- **Always** extend the appropriate base class for pages and editors.
- **Always** use the test utility patterns for select fields, error validation, and dialog handling.
- **Always** provide a fluent, chainable API for test interactions.
- **Checklist:** Follow the steps above for new CRUD features.

By adhering to this structure, we ensure our test suite remains maintainable, readable, and scalable for years to come.
